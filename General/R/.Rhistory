library()
N = c(1 2 2 3 5 9)
N = c(1,2,2,3,5,9)
N(N >= 3)
n = which(N >= 3)
N[N >= 3]
N[N >= 3] = NaN
library(xlsx)
install.packages("xlsx")
N = c(1,2,2,3,5,9)
N = c(1,2,2,
3, 5, 9)
N = c(1,2,2,
3, 5, 9)
# Install Ncessary Packages ========
install.Packages('BioManager),
BiocManager::install('rhdf5)
BiocManager::install('rhdf5')
library(neonUtilities)
library(neonUtilities)
options(stringsAsFactors=F)
# Install Ncessary Packages ========
install.Packages('BiocManager')
# Install Ncessary Packages ========
install.Packages('BiocManager')
install.packages('neonUtilities')
# Install Ncessary Packages ========
install.Packages('BiocManager')
BiocManager::install('rhdf5')
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Install Ncessary Packages ========
install.Packages('BiocManager')
# Load Packages =====
library(neonUtilities)
# Load Packages =====
library(neonUtilities)
# Load Packages =====
install.packages("devtools")
# Load Packages =====
install.packages("devtools")
# Stack Downloaded NEON Data ========
# See https://www.neonscience.org/eddy-data-intro for comments
# Load Packages =====
install.packages("devtools")
install.packages("neonUtilities")
install.packages("raster")
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")
library(neonUtilities)
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Stack Flux measurements ========
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$NIWO), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
# Time stamps ======
timeB <- substring(flux$ORNL$timeBgn, 1, nchar(flux$ORNL$timeBgn)-4)
timeB <- strptime(timeB, format="%Y-%m-%dT%H:%M%S", tz="GMT")
timeB <- as.POSIXct(timeB)
flux$ORNL <- cbind(timeB, flux$ORNL)
# Visualize CO2 Fluxes
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=".", xlab="Date", ylab="CO2 Flux",
format="%Y-%m-%d")
# Reduce the time frame to a couple of days
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=20, xlab="Date", ylab="CO2 flux",
xlim=c(as.POSIXct("2019-10-23", tz="GMT"),
as.POSIXct("2019-10-30", tz="GMT")),
ylim=c(-20,20),
format="%Y-%m-%d", grid())
# Download PAR Data ======
pr <- loadByProduct("DP1.00024.001", site="ORNL", avg=30,
startdate="2019-09", enddate="2018-11",
package="basic", check.size=F)
pr.top <- pr$PARPAR_30min[which(pr$PARPAR_30min$verticalPosition==
max(pr$PARPAR_30min$verticalPosition)),]
# Convert timestamps to match fluxes
timeB <- strptime(pr.top$startDateTime,
format="%Y-%m-%dT%H:%M:%SZ",
tz="GMT")
timeB <- as.POSIXct(timeB)
pr.top <- cbind(timeB, pr.top)
# Merge PAR and Flux
fx.pr <- merge(pr.top, flux$ORNL, by="timeB")
# Visualize fluxes against PAR
plot(fx.pr$data,fluxCo2.nsae.flux~fx.pr$PARMean,
pch=".", ylim=c(-20,20),
xlab="PAR", ylab="CO2 flux")
# Vertical profile data ======
vert_profile <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
level="dp03")
head(profile$ORNL)
# Stack Flux measurements ========
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$NIWO), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
# Time stamps ======
timeB <- substring(flux$ORNL$timeBgn, 1, nchar(flux$ORNL$timeBgn)-4)
timeB <- strptime(timeB, format="%Y-%m-%dT%H:%M%S", tz="GMT")
timeB <- as.POSIXct(timeB)
flux$ORNL <- cbind(timeB, flux$ORNL)
# Visualize CO2 Fluxes
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=".", xlab="Date", ylab="CO2 Flux",
format="%Y-%m-%d")
# Reduce the time frame to a couple of days
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=20, xlab="Date", ylab="CO2 flux",
xlim=c(as.POSIXct("2019-10-23", tz="GMT"),
as.POSIXct("2019-10-30", tz="GMT")),
ylim=c(-20,20),
format="%Y-%m-%d", grid())
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$ORNL), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$ORNL), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
flux
names(flux)
# Stack Downloaded NEON Data ========
# See https://www.neonscience.org/eddy-data-intro for comments
# Load Packages =====
install.packages("devtools")
install.packages("neonUtilities")
install.packages("raster")
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")
install.packages("BiocManager")
install.packages("devtools")
library(neonUtilities)
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Stack Flux measurements ========
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Load Packages =====
install.packages("devtools")
install.packages("neonUtilities")
install.packages("raster")
install.packages("devtools")
library(neonUtilities)
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Stack Flux measurements ========
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$ORNL), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
f <- 5
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
level="dp04")
# Load Packages =====
install.packages("devtools")
install.packages("neonUtilities")
install.packages("raster")
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")
install.packages("BiocManager")
install.packages("neonUtilities")
# Stack Flux measurements ========
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack00200",
level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$ORNL), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
# Time stamps ======
timeB <- substring(flux$ORNL$timeBgn, 1, nchar(flux$ORNL$timeBgn)-4)
timeB <- strptime(timeB, format="%Y-%m-%dT%H:%M%S", tz="GMT")
timeB <- as.POSIXct(timeB)
flux$ORNL <- cbind(timeB, flux$ORNL)
# Visualize CO2 Fluxes
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=".", xlab="Date", ylab="CO2 Flux",
format="%Y-%m-%d")
# Reduce the time frame to a couple of days
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=20, xlab="Date", ylab="CO2 flux",
xlim=c(as.POSIXct("2019-10-23", tz="GMT"),
as.POSIXct("2019-10-30", tz="GMT")),
ylim=c(-20,20),
format="%Y-%m-%d", grid())
# Download PAR Data ======
pr <- loadByProduct("DP1.00024.001", site="ORNL", avg=30,
startdate="2019-09", enddate="2018-11",
package="basic", check.size=F)
pr.top <- pr$PARPAR_30min[which(pr$PARPAR_30min$verticalPosition==
max(pr$PARPAR_30min$verticalPosition)),]
# Convert timestamps to match fluxes
timeB <- strptime(pr.top$startDateTime,
format="%Y-%m-%dT%H:%M:%SZ",
tz="GMT")
timeB <- as.POSIXct(timeB)
pr.top <- cbind(timeB, pr.top)
# Merge PAR and Flux
fx.pr <- merge(pr.top, flux$ORNL, by="timeB")
# Visualize fluxes against PAR
plot(fx.pr$data,fluxCo2.nsae.flux~fx.pr$PARMean,
pch=".", ylim=c(-20,20),
xlab="PAR", ylab="CO2 flux")
# Vertical profile data ======
vert_profile <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
level="dp03")
head(profile$ORNL)
# Stack Flux measurements ========
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack00200",
level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$ORNL), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
# Time stamps ======
timeB <- substring(flux$ORNL$timeBgn, 1, nchar(flux$ORNL$timeBgn)-4)
timeB <- strptime(timeB, format="%Y-%m-%dT%H:%M%S", tz="GMT")
timeB <- as.POSIXct(timeB)
flux$ORNL <- cbind(timeB, flux$ORNL)
# Visualize CO2 Fluxes
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=".", xlab="Date", ylab="CO2 Flux",
format="%Y-%m-%d")
# Reduce the time frame to a couple of days
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=20, xlab="Date", ylab="CO2 flux",
xlim=c(as.POSIXct("2019-10-23", tz="GMT"),
as.POSIXct("2019-10-30", tz="GMT")),
ylim=c(-20,20),
format="%Y-%m-%d", grid())
# Stack Flux measurements ========
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack00200/",
level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$ORNL), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
# Stack Flux measurements ========
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack00200/",
level="dp04")
library(neonUtilities)
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Stack Flux measurements ========
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack00200/",
level="dp04")
install.packages("BiocManager")
BiocManager::install('rhdf5')
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$ORNL), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
wd
getwd()
directory <- "C:\Users\moyoa\Google Drive\CompSci\PhD Dissertation\Data Analysis\Picarro\Cumberland\Vandy_NOAA_OakRidge\NEON_ORNL\NEON_2018_07__2019_11"
directory <- C:\Users\moyoa\Google Drive\CompSci\PhD Dissertation\Data Analysis\Picarro\Cumberland\Vandy_NOAA_OakRidge\NEON_ORNL\NEON_2018_07__2019_11
directory <- "C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11"
setwd(directory)
directory <- "C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL"
setwd(directory)
# Load Packages =====
install.packages("devtools")
install.packages("devtools")
# Load Packages =====
install.packages("devtools")
install.packages("neonUtilities")
install.packages("raster")
devtools::install_github("NEONScience/NEON-geolocation/geoNEON")
# Download and organize files ======
# Zip Downloaded Files
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-06", enddate="2018-07",
savepath="/NEON_2018_07__2019_11",
check.size=F)
# Stack zipped
flux <- stackEddy(filepath="/NEON_2018_07__2019_11/filesToStack0020/", level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Examine pertinent variables
term <- unlist(strsplit(names(flux$ORNL), split=".", fixed=T))
flux$objDesc[which(flux$objDesc$Object %in% term),]
# Examine the flux variables
flux$variables
# Time stamps ======
timeB <- substring(flux$ORNL$timeBgn, 1, nchar(flux$ORNL$timeBgn)-4)
timeB <- strptime(timeB, format="%Y-%m-%dT%H:%M%S", tz="GMT")
timeB <- as.POSIXct(timeB)
flux$ORNL <- cbind(timeB, flux$ORNL)
# Visualize CO2 Fluxes
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=".", xlab="Date", ylab="CO2 Flux",
format="%Y-%m-%d")
# Reduce the time frame to a couple of days
plot(flux$ORNL$data.fluxCo2.nsae.flux~timeB, pch=20, xlab="Date", ylab="CO2 flux",
xlim=c(as.POSIXct("2019-10-23", tz="GMT"),
as.POSIXct("2019-10-30", tz="GMT")),
ylim=c(-20,20),
format="%Y-%m-%d", grid())
# Download PAR Data ======
pr <- loadByProduct("DP1.00024.001", site="ORNL", avg=30,
startdate="2019-09", enddate="2018-11",
package="basic", check.size=F)
pr.top <- pr$PARPAR_30min[which(pr$PARPAR_30min$verticalPosition==
max(pr$PARPAR_30min$verticalPosition)),]
# Convert timestamps to match fluxes
timeB <- strptime(pr.top$startDateTime,
format="%Y-%m-%dT%H:%M:%SZ",
tz="GMT")
timeB <- as.POSIXct(timeB)
pr.top <- cbind(timeB, pr.top)
# Merge PAR and Flux
fx.pr <- merge(pr.top, flux$ORNL, by="timeB")
# Visualize fluxes against PAR
plot(fx.pr$data,fluxCo2.nsae.flux~fx.pr$PARMean,
pch=".", ylim=c(-20,20),
xlab="PAR", ylab="CO2 flux")
# Vertical profile data ======
vert_profile <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
level="dp03")
head(profile$ORNL)
# Stack zipped
flux <- stackEddy(filepath="/NEON_2018_07__2019_11/filesToStack0020/", level="dp04")
# Stack zipped
flux <- stackEddy(filepath="/NEON_2018_07__2019_11/filesToStack0020/", level="dp04")
install.packages('BiocManager')
BiocManager::install('rhdf5')
install.packages('BiocManager')
BiocManager::install('rhdf5')
flux <- stackEddy(filepath="/NEON_2018_07__2019_11/filesToStack0020/", level="dp04")
# Load Packages =====
install.packages('BiocManager')
BiocManager::install('rhdf5')
install.packages("BiocManager")
library(neonUtilities)
# Download and organize files ======
# Zip Downloaded Files
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-06", enddate="2018-07",
savepath="/NEON_2018_07__2019_11",
check.size=F)
# Stack zipped
flux <- stackEddy(filepath="/NEON_2018_07__2019_11/filesToStack0020/", level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
library(neonUtilities)
# Download and organize files ======
# Zip Downloaded Files
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-06", enddate="2018-07",
savepath="~/NEON_2018_07__2019_11",
check.size=F)
# Stack zipped
flux <- stackEddy(filepath="~/NEON_2018_07__2019_11/filesToStack0020/", level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
library(neonUtilities)
# Download and organize files ======
# Zip Downloaded Files
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-06", enddate="2018-07",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Stack zipped
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack0020/", level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Load Packages =====
install.packages('BiocManager')
BiocManager::install('rhdf5')
install.packages("BiocManager")
# Zip Downloaded Files
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Stack zipped
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack00200/", level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
# Download and organize files ======
# Zip Downloaded Files
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Stack zipped
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack00200/", level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
find(stackEddy)
help.search(stackEddy)
??stackEddy
??neonUtilities
??zipsByProduct
400E-06 * 1.3966E-18
400E-06 * 1.3966E18
0.71*( (4/3) * 3.14159 * (6371^3) )
(1.08E12) * 0.71
5.1E8 * 0.71
(5.1E8) * 0.71
(362.1E6) * 3682.2
1024*1E9
1.024*1.333E9
1364992000/1E6
1364.992*400
(1024*1E9)*1.33E9*(400/1E6)
1024*1.333E9
1024*1E9*1.333E9
# Stack Downloaded NEON Data ========
# See https://www.neonscience.org/eddy-data-intro for comments
# Load Packages =====
install.packages('BiocManager')
BiocManager::install('rhdf5')
install.packages("BiocManager")
library(neonUtilities)
# Download and organize files ======
# Zip Downloaded Files
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Stack zipped
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack00200/", level="dp04")
# Get names of flux objects
names(flux)
head(flux$ORNL)
library(neonUtilities)
# Download and organize files ======
# Zip Downloaded Files
zipsByProduct(dpID="DP4.00200.001", package="basic",
site=c("ORNL"),
startdate="2018-07", enddate="2019-11",
savepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11",
check.size=F)
# Stack zipped
flux <- stackEddy(filepath="C:/Users/moyoa/Google Drive/CompSci/PhD Dissertation/Data Analysis/Picarro/Cumberland/Vandy_NOAA_OakRidge/NEON_ORNL/NEON_2018_07__2019_11/filesToStack00200",
level="dp04")
# Stack zipped
flux <- stackEddy(filepath="/filesToStack00200",
level="dp04")
exit
